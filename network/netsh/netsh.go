package netsh

import (
	"errors"
	"fmt"
	"strings"
	"syscall"
	"time"

	"code.cloudfoundry.org/winc/hcs"
	"github.com/Microsoft/hcsshim"
	"github.com/sirupsen/logrus"
)

const CMD_TIMEOUT = time.Second * 2

//go:generate counterfeiter -o fakes/hcs_client.go --fake-name HCSClient . HCSClient
type HCSClient interface {
	OpenContainer(string) (hcs.Container, error)
}

type Runner struct {
	hcsClient HCSClient
	id        string
}

func NewRunner(hcsClient HCSClient, containerId string) *Runner {
	return &Runner{
		hcsClient: hcsClient,
		id:        containerId,
	}
}

func (nr *Runner) RunContainer(args []string) error {
	commandLine := "netsh " + strings.Join(args, " ")
	logrus.Infof("running '%s' in %s", commandLine, nr.id)

	container, err := nr.hcsClient.OpenContainer(nr.id)
	if err != nil {
		return err
	}
	defer container.Close()

	p, err := container.CreateProcess(&hcsshim.ProcessConfig{
		CommandLine: commandLine,
	})
	if err != nil {
		return cleanError(err)
	}

	if err := p.WaitTimeout(CMD_TIMEOUT); err != nil {
		return err
	}

	exitCode, err := p.ExitCode()
	if err != nil {
		return err
	}
	if exitCode != 0 {
		errRet := fmt.Errorf("running '%s' in %s failed: exit code %d", commandLine, nr.id, exitCode)
		logrus.Error(errRet.Error())
		return errRet
	}

	return nil
}

func cleanError(err error) error {
	cErr, ok := err.(*hcsshim.ContainerError)
	if !ok {
		return err
	}

	errno, ok := cErr.Err.(syscall.Errno)
	if !ok {
		return err
	}

	// following list of errors generated by running this code in a low memory
	// environment several times
	//
	// actually an OOM error:
	// 0x5af is ERROR_COMMITMENT_LIMIT
	// https://msdn.microsoft.com/en-us/library/windows/desktop/ms681385(v=vs.85).aspx
	//
	// not directly an OOM error but show up in testing:
	// 0x6be is RPC_S_CALL_FAILED
	// https://msdn.microsoft.com/en-us/library/windows/desktop/ms681386(v=vs.85).aspx
	// 0x71a is ERROR_COMMITMENT_LIMIT
	// https://msdn.microsoft.com/en-us/library/windows/desktop/ms681386(v=vs.85).aspx
	// 0x36b1 is ERROR_SXS_CANT_GEN_ACTCTX
	// https://msdn.microsoft.com/en-us/library/windows/desktop/ms681384(v=vs.85).aspx
	oomCodes := []syscall.Errno{0x5af, 0x6be, 0x71a, 0x36b1}

	for _, code := range oomCodes {
		if errno == code {
			return errors.New("the container does not have enough memory to initialize its network")
		}
	}

	return err
}
